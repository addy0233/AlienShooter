using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerHealth1 : MonoBehaviour
{
    public float currentHealth;
    public float maxHealth;

    [Header("Health Bar")]
    public bool HealthBarOn = false;
    public bool AlwaysShowHealthBar = true;
    private bool HealthBarShow = false;
    public float HealthBarShowTime = 16f;
    private float CurrentHealthBarShowTime;
    public Healthbar1 healthBar;
    public GameObject HealthBar;

    [Header("Regeneration")]
    [Tooltip("Turning the Regeneration stuff on")]
    public bool RegenerationOn = true;
    [Tooltip("The variable represent amount of health that will be regenerated by one time")]
    public float RegenerationPercentage = 10f;
    private float RegenerationUnit;
    [Tooltip("The variable represent time between health regenerations")]
    public float RegenerationCooldown = 0.8f;
    public float TimeBeforeRegeneration = 3f;
    public float currentTimeBeforeRegeneration;
    private bool RegenerationKey = false;
    private float CurrentRegeneration = 0;
    public bool isDead = false;
    private bool hasDead = false;

    void Start()
    {
        currentHealth = maxHealth;

        if (HealthBarOn == true)
        {
            healthBar.SetMaxHealth(maxHealth);
        }

        if (AlwaysShowHealthBar == false)
        {
            CurrentHealthBarShowTime = HealthBarShowTime;

            HealthBar.SetActive(false);

            HealthBarShow = false;
        }

        currentTimeBeforeRegeneration = TimeBeforeRegeneration;

        isDead = false;
        hasDead = false;
}

    void Update()
    {
        if (isDead == false)
        {
            currentTimeBeforeRegeneration -= Time.deltaTime * 1f;

            RegenerationUnit = (maxHealth / 100) * RegenerationPercentage;

            if (currentHealth <= 0)
            {
                Destroy(gameObject);

                isDead = true;

                hasDead = true;
            }

            #region Regeneration

            if (currentTimeBeforeRegeneration <= 0f && hasDead == false)
            {
                if (RegenerationKey == true)
                {
                    CurrentRegeneration -= Time.deltaTime * 1f;
                }

                if (RegenerationOn == true)
                {
                    if (CurrentRegeneration <= 0)
                    {
                        CurrentRegeneration = RegenerationCooldown;

                        currentHealth += RegenerationUnit;

                        HealthBarShow = true;

                        healthBar.SetHealth(currentHealth);
                    }
                }

                //Regeneration Key
                if (currentHealth <= maxHealth)
                {
                    RegenerationKey = true;

                    healthBar.SetHealth(currentHealth);
                }
                else
                {
                    RegenerationKey = false;
                }

                //Set Maximum Current Health
                if (currentHealth >= maxHealth)
                {
                    currentHealth = maxHealth;

                    RegenerationKey = false;

                    healthBar.SetHealth(currentHealth);
                }
            }

            #endregion
        }

        if (HealthBarOn == true)
        {
            if (AlwaysShowHealthBar == false)
            {
                if (HealthBarShow == true)
                {
                    CurrentHealthBarShowTime -= Time.deltaTime * 1f;

                    HealthBar.SetActive(true);

                    if (CurrentHealthBarShowTime <= 0)
                    {
                        HealthBar.SetActive(false);

                        CurrentHealthBarShowTime = HealthBarShowTime;

                        HealthBarShow = false;
                    }
                }
            }
        }
    }

    public void TakeDamage(float amountOfDamage)
    {
        currentHealth -= amountOfDamage;

        if (HealthBarOn == true)
        {
            healthBar.SetHealth(currentHealth);
        }

        CurrentHealthBarShowTime = HealthBarShowTime;

        currentTimeBeforeRegeneration = TimeBeforeRegeneration;

        HealthBarShow = true;
    }
}
